name: Deploy Basic Healthcare Functions to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "."
  PYTHON_VERSION: "3.11"
  TERRAFORM_VERSION: "1.5.0"

jobs:
  test:
    name: Test Functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Create a constraints file to block grpcio
          echo "grpcio" > constraints.txt
          echo "grpcio-tools" >> constraints.txt
          echo "grpcio-status" >> constraints.txt
          # Install with constraints to prevent grpcio installation
          pip install --prefer-binary --constraint constraints.txt -r requirements.txt
          pip install --prefer-binary pytest

      - name: Run tests
        run: |
          python -m pytest test_functions.py -v

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        id: tf-plan
        working-directory: infra
        run: |
          export exitcode=0
          terraform plan -var-file="terraform.tfvars.json" -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          echo "Terraform Plan Exit Code: $exitcode"

          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed"
            exit 1
          elif [ $exitcode -eq 0 ]; then
            echo "No changes detected"
          elif [ $exitcode -eq 2 ]; then
            echo "Changes detected"
          fi

      - name: Terraform Show
        working-directory: infra
        run: terraform show -no-color tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode != 1
    steps:
      - name: Debug - Check Plan Exit Code
        run: |
          echo "Terraform Plan Exit Code: ${{ needs.terraform-plan.outputs.tfplanExitCode }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Should Apply: ${{ github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode != 1 }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: infra/

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Import existing resources if they exist
        working-directory: infra
        run: |
          # Try to import the resource group if it exists (using new naming pattern)
          terraform import azurerm_resource_group.main /subscriptions/82ba81d8-2ee1-4c98-87ce-dc378bef4592/resourceGroups/rg-dev-v2-EastUS || echo "Resource group not found or already imported"
        continue-on-error: true

      - name: Terraform Plan (Fresh)
        working-directory: infra
        run: |
          export exitcode=0
          terraform plan -var-file="terraform.tfvars.json" -detailed-exitcode -no-color -out tfplan-apply || export exitcode=$?
          
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed"
            exit 1
          elif [ $exitcode -eq 0 ]; then
            echo "No changes detected"
          elif [ $exitcode -eq 2 ]; then
            echo "Changes detected - proceeding with apply"
          fi

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_LOG: INFO
        run: |
          echo "🚀 Starting Terraform Apply with verbose logging..."
          echo "📋 Plan file contents:"
          terraform show tfplan-apply
          
          echo "🔧 Applying configuration..."
          set -e  # Exit on any error
          terraform apply -auto-approve tfplan-apply
          
          echo "✅ Apply command completed successfully"
          
          echo "📊 Checking state after apply..."
          terraform state list
          
          echo "📋 Checking outputs..."
          terraform output || echo "No outputs available yet"

      - name: Verify Terraform State
        working-directory: infra
        run: |
          echo "Checking Terraform state..."
          terraform state list || echo "No state found"

      - name: Get Function App Name
        id: get-function-app
        working-directory: infra
        run: |
          # Check if outputs are available
          if terraform output -json > /dev/null 2>&1; then
            FUNCTION_APP_NAME=$(terraform output -raw function_app_name 2>/dev/null || echo "output-not-found")
            echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
            echo "Function App Name: $FUNCTION_APP_NAME"
          else
            echo "Terraform outputs not available yet"
            echo "function_app_name=not-available" >> $GITHUB_OUTPUT
          fi

      - name: Output Infrastructure Details
        working-directory: infra
        run: |
          echo "## Infrastructure Deployment Complete 🚀" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Handle outputs gracefully
          FUNCTION_APP_NAME=$(terraform output -raw function_app_name 2>/dev/null || echo "not-available")
          FUNCTION_APP_URL=$(terraform output -raw function_app_url 2>/dev/null || echo "not-available")
          STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name 2>/dev/null || echo "not-available")
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name 2>/dev/null || echo "not-available")
          
          echo "| Function App | $FUNCTION_APP_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "| Function App URL | $FUNCTION_APP_URL |" >> $GITHUB_STEP_SUMMARY
          echo "| Storage Account | $STORAGE_ACCOUNT_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | $RESOURCE_GROUP_NAME |" >> $GITHUB_STEP_SUMMARY

  deploy-function:
    name: Deploy Function App
    runs-on: ubuntu-latest
    needs: [terraform-apply, terraform-plan]
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode != 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Create a constraints file to block grpcio
          echo "grpcio" > constraints.txt
          echo "grpcio-tools" >> constraints.txt
          echo "grpcio-status" >> constraints.txt
          # Install with constraints to prevent grpcio installation
          pip install --prefer-binary --constraint constraints.txt -r requirements.txt

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init (for outputs)
        working-directory: infra
        run: terraform init

      - name: Verify Infrastructure Creation
        working-directory: infra
        run: |
          echo "🔍 Verifying Terraform vs Azure Reality..."
          
          echo "📊 Terraform State:"
          terraform state list || echo "No Terraform state found"
          
          echo "🏗️ Actual Azure Resources:"
          echo "Checking for resource group 'rg-dev-v2-EastUS'..."
          az group show --name "rg-dev-v2-EastUS" --output table 2>/dev/null || echo "Resource group not found in Azure"
          
          echo "📋 All resource groups in subscription:"
          az group list --query "[?contains(name, 'rg-dev')].{Name:name, Location:location}" --output table

      - name: Get Function App Name (Alternative Method)
        id: get-function-app
        run: |
          echo "🔍 Attempting to find Function App using Azure CLI..."
          
          # Try to get function app from resource group
          FUNCTION_APP_NAME=$(az functionapp list --resource-group "rg-dev-v2-EastUS" --query "[0].name" -o tsv 2>/dev/null || echo "not-found")
          
          if [ "$FUNCTION_APP_NAME" != "not-found" ] && [ ! -z "$FUNCTION_APP_NAME" ]; then
            echo "✅ Found Function App: $FUNCTION_APP_NAME"
            echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          else
            echo "❌ Function App not found. Checking if resource group exists..."
            RG_EXISTS=$(az group exists --name "rg-dev-v2-EastUS" 2>/dev/null || echo "false")
            
            if [ "$RG_EXISTS" = "true" ]; then
              echo "✅ Resource group exists. Listing all resources:"
              az resource list --resource-group "rg-dev-v2-EastUS" --output table
            else
              echo "❌ Resource group 'rg-dev-v2-EastUS' does not exist"
              echo "🔍 Available resource groups:"
              az group list --query "[].name" -o table
            fi
            
            echo "function_app_name=not-found" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create deployment package
        run: |
          # Create a clean deployment package
          mkdir -p deployment_package
          cp function_app.py deployment_package/
          cp host.json deployment_package/
          cp requirements.txt deployment_package/

          # Create zip package
          cd deployment_package
          zip -r ../function_deployment.zip .
          cd ..

      - name: Deploy to Azure Functions using Run From Package
        run: |
          FUNCTION_APP_NAME="${{ steps.get-function-app.outputs.function_app_name }}"
          
          # Validate function app name
          if [ "$FUNCTION_APP_NAME" = "not-found" ] || [ -z "$FUNCTION_APP_NAME" ]; then
            echo "❌ Function app name not available. Cannot deploy."
            exit 1
          fi
          
          echo "🚀 Deploying to Function App: $FUNCTION_APP_NAME"

          # Upload zip package to Function App (using known resource group name)
          az functionapp deployment source config-zip \
            --name "$FUNCTION_APP_NAME" \
            --resource-group "rg-dev-v2-EastUS" \
            --src function_deployment.zip

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

      - name: Test deployed function
        id: test-function
        run: |
          FUNCTION_APP_NAME="${{ steps.get-function-app.outputs.function_app_name }}"
          FUNCTION_APP_URL="https://${FUNCTION_APP_NAME}.azurewebsites.net"

          echo "🧪 Testing Function App: $FUNCTION_APP_URL"

          # Get function key for testing (using known resource group name)
          FUNCTION_KEY=$(az functionapp function keys list \
            --name "$FUNCTION_APP_NAME" \
            --resource-group "rg-dev-v2-EastUS" \
            --function-name health \
            --query "default" -o tsv 2>/dev/null || echo "no-key-found")

          if [ "$FUNCTION_KEY" = "no-key-found" ]; then
            echo "⚠️ Could not get function key, trying without authentication..."
            # Test health endpoint without key
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${FUNCTION_APP_URL}/api/health" || echo "000")
          else
            # Test health endpoint with key
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${FUNCTION_APP_URL}/api/health?code=${FUNCTION_KEY}" || echo "000")
          fi

          echo "Health check status: $HTTP_STATUS"

          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ Health check passed!"
            echo "health_check_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Health check failed with status: $HTTP_STATUS"
            echo "health_check_status=failed" >> $GITHUB_OUTPUT
            # Don't exit 1 here - let's complete the deployment summary
          fi

      - name: Deployment Summary
        run: |
          echo "## Function App Deployment Complete 🎉" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | https://${{ steps.get-function-app.outputs.function_app_name }}.azurewebsites.net/api/health |" >> $GITHUB_STEP_SUMMARY
          echo "| Data Lake Upload | https://${{ steps.get-function-app.outputs.function_app_name }}.azurewebsites.net/api/datalake/upload |" >> $GITHUB_STEP_SUMMARY
          echo "| Data Lake List | https://${{ steps.get-function-app.outputs.function_app_name }}.azurewebsites.net/api/datalake/list |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check Status:** ${{ steps.test-function.outputs.health_check_status == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
